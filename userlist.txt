"email":"admin.james@gmail.com",
"password":"admin@123",

"email": "organizer.William1@gmail.com",
"password": "Manoj@123",

"email":"participant.Christopher1@gmail.com",
"password":"Yashi@123",

"email":"provider.robert@gmail.com",
"password":"Pulki@123",

Forgine Credential

"email": "organizer.jos1@gmail.com",
"password": "John@123",

"email": "participant.sam2@gmail.com",
"password": "SamCurran@123",

"email": "admin.jofra1@gmail.com",
"password": "Jofra@123",

"email": "provider.harry2@gmail.com",
"password": "Harry@123",

"email": "provider.nelson23@gmail.com",
"password": "Nelson@123",

"email": "polydabra12@gmail.com",
"password": "Paul@123",

"email": "provider.watson13@gmail.com",
"password": "wAtson@123",

"email": "provider.root2@gmail.com",
"password": "JoeRoot@123",


comparePassword
exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;

        const existingUser = await User.findOne({ email });

        // if (!existingUser || !(await bcrypt.compare(password, existingUser.password))) {
        //     res.clearCookie('token');
        //     return res.status(400).json({ message: "Invalid credentials" });
        // }

        if (!existingUser) {
            res.clearCookie('token');
            return res.status(400).json({ message: "Invalid credentials" });
        }

        // Block login if user status is not active
        if (existingUser.status !== 'active') {
            return res.status(403).json({
                message: "Your account is not activated yet. Please contact the admin."
            });
        }

        // Password verification
        const isPasswordMatch = await bcrypt.compare(password, existingUser.password);
        if (!isPasswordMatch) {
            res.clearCookie('token');
            return res.status(400).json({ message: "Invalid credentials" });
        }

        
        const secureInfo = sanitizeUser(existingUser);
        const token = generateToken(secureInfo);
        const cookieExpiry = 2 * 60 * 60 * 1000;

        res.cookie('token', token, {
            sameSite: process.env.PRODUCTION ? "none" : 'Lax',
            maxAge: cookieExpiry,
            httpOnly: true,
            secure: process.env.PRODUCTION ? true : false
        });

        // ✅ Log activity manually — since req.user is not set
        // Get IP address
        const ip =
            req.headers["x-forwarded-for"]?.split(",")[0] ||
            req.socket.remoteAddress ||
            req.connection.remoteAddress;
 
        //  Fetch location using your utility
        let location = "-";
        try {
            location = await getLocationFromIP(ip);
        } catch (err) {
            console.warn("Could not fetch location info:", err.message);
        }
        try {
            await Activity.create({
                userId: existingUser._id,
                activityType: 'login success',
                description: `${existingUser.email} logged in`,
                ipAddress: req.ip || req.headers['x-forwarded-for'] || req.connection.remoteAddress,
                userAgent: req.headers['user-agent'],
                metadata: {
                    body: { email },
                    query: req.query,
                    params: req.params
                },
                location
            });
        } catch (logErr) {
            console.error("Activity logging failed:", logErr.message);
        }

        return res.status(200).json({
            user: secureInfo,
            token,
            expiresIn: cookieExpiry,
            message: "Signin successfully"
        });

    } catch (error) {
        console.error("Login error:", error.message);
        return res.status(500).json({
            message: 'Some error occurred while logging in, please try again later'
        });
    }
};


exports.logout = async (req, res) => {
    try {
        // Clear the token cookie
        res.clearCookie('token', {
            sameSite: process.env.PRODUCTION === 'true' ? "None" : 'Lax',
            httpOnly: true,
            secure: process.env.PRODUCTION === 'true' ? true : false
        });

        return res.status(200).json({ message: "Logout successful" });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Error while logging out, please try again later" });
    }
};
